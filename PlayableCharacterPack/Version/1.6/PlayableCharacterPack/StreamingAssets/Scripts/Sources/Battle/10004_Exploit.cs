using System;
using System.Collections.Generic;
using Memoria;
using Memoria.Data;
using FF9;

namespace Memoria.Scripts.Battle
{
    /// <summary>
    /// Exploit: damage at the cost of removing a bad status
    /// </summary>
    [BattleScript(Id)]
    public sealed class ExploitScript : IBattleScript
    {
        public const Int32 Id = 10004;
		
		private static BattleStatus ValidStatuses = (BattleStatusConst.AnyNegative & ~BattleStatus.Death) | BattleStatus.Berserk;

        private readonly BattleCalculator _v;

        public ExploitScript(BattleCalculator v)
        {
            _v = v;
        }

        public void Perform()
        {
            _v.WeaponPhysicalParams();
            _v.Caster.EnemyTranceBonusAttack();
            _v.Caster.PhysicalPenaltyAndBonusAttack();
            _v.Target.PhysicalPenaltyAndBonusAttack();
            _v.BonusElement();
            if (_v.CanAttackWeaponElementalCommand())
            {
				Boolean statusRemoved = false;
				Boolean isTranceCmd = _v.Command.Id == (BattleCommandId)10021;
				foreach (BattleStatusId statusId in ValidStatuses.ToStatusList())
				{
					if (btl_stat.RemoveStatuses(_v.Target, statusId.ToBattleStatus()) == 2)
					{
						_v.Context.DamageModifierCount++;
						statusRemoved = true;
						if (!isTranceCmd)
							break;
					}
				}
				if (!statusRemoved)
				{
					_v.Context.Flags |= BattleCalcFlags.Miss;
					return;
				}
                _v.CalcHpDamage();
                _v.TryAlterMagicStatuses();
				if (isTranceCmd && statusRemoved && _v.Command.IsATBCommand)
				{
					_v.Caster.AddDelayedModifier(
						caster => caster.CurrentAtb >= caster.MaximumAtb,
						caster =>
						{
							if (!caster.IsUnderAnyStatus(BattleStatusConst.StopAtb) && caster.CurrentAtb < caster.MaximumAtb)
								caster.CurrentAtb = (Int16)(caster.MaximumAtb - 1);
						}
					);
				}
            }
        }
    }
}
